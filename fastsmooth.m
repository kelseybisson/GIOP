function SmoothY=fastsmooth(Y,w,type,ends)% fastbsmooth(Y,w,type,ends) smooths vector Y with smooth %  of width w. Version 2.0, May 2008.% The argument "type" determines the smooth type:%   If type=1, rectangular (sliding-average or boxcar) %   If type=2, triangular (2 passes of sliding-average)%   If type=3, pseudo-Gaussian (3 passes of sliding-average)% The argument "ends" controls how the "ends" of the signal % (the first w/2 points and the last w/2 points) are handled.%   If ends=0, the ends are zero.  (In this mode the elapsed %     time is independent of the smooth width). The fastest.%   If ends=1, the ends are smoothed with progressively %     smaller smooths the closer to the end. (In this mode the  %     elapsed time increases with increasing smooth widths).% fastsmooth(Y,w,type) smooths with ends=0.% fastsmooth(Y,w) smooths with type=1 and ends=0.% Example:% fastsmooth([1 1 1 10 10 10 1 1 1 1],3)= [0 1 4 7 10 7 4 1 1 0]% fastsmooth([1 1 1 10 10 10 1 1 1 1],3,1,1)= [1 1 4 7 10 7 4 1 1 1]%  T. C. O'Haver, May, 2008.%%% Copyright (c) 2009, Tom O'Haver% All rights reserved.%%Redistribution and use in source and binary forms, with or without %modification, are permitted provided that the following conditions are met:%% * Redistributions of source code must retain the above copyright %notice, this list of conditions and the following disclaimer.% * Redistributions in binary form must reproduce the above copyright %notice, this list of conditions and the following disclaimer in %the documentation and/or other materials provided with the distribution%%THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" %AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE %IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE %ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE %LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR %CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF %SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR% PROFITS; OR BUSINESS%INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN %CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) %ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE %POSSIBILITY OF SUCH DAMAGE.if nargin==2, ends=0; type=1; endif nargin==3, ends=0; end  switch type    case 1       SmoothY=sa(Y,w,ends);    case 2          SmoothY=sa(sa(Y,w,ends),w,ends);    case 3       SmoothY=sa(sa(sa(Y,w,ends),w,ends),w,ends);  endfunction SmoothY=sa(Y,smoothwidth,ends)w=round(smoothwidth);SumPoints=sum(Y(1:w));s=zeros(size(Y));halfw=round(w/2);L=length(Y);for k=1:L-w,   s(k+halfw-1)=SumPoints;   SumPoints=SumPoints-Y(k);   SumPoints=SumPoints+Y(k+w);ends(k+halfw)=sum(Y(L-w+1:L));SmoothY=s./w;% Taper the ends of the signal if ends=1.  if ends==1,  startpoint=(smoothwidth + 1)/2;  SmoothY(1)=(Y(1)+Y(2))./2;  for k=2:startpoint,     SmoothY(k)=mean(Y(1:(2*k-1)));     SmoothY(L-k+1)=mean(Y(L-2*k+2:L));  end  SmoothY(L)=(Y(L)+Y(L-1))./2;  end